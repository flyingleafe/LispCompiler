#+TODO: TODO STARTED WAITING | DONE CANCELED
#+TITLE: Запиливание сабжа

* Notes
** Codestyle
   * NoImplicitPrelude -- OK
   * UnicodeSyntax -- OK, за исключением плохо рендерящихся символов типа ∷.
   * Отделять импорты локальных модулей и внешних, локальные ниже.
   * TBD
* Tasks
** DONE База проекта, грамматика SExp и парсер                  :flyingleafe:
** DONE Описание yasm (basic)                                       :volhovm:
   Сделать грамматику более сложной не получилось (хотя хочется добавить возможность компилить еще в x32, сделать data Instruction более строгим, добавив data Register). Слишком сложно обработать все варианты аргументов в зависимости от конвенции (сколько там нужно будет сделать конструкторов только для Mov).
** DONE Kодгенератор из yasm в .yasm (basic Show)                   :volhovm:
** DONE Парсер/лоадер кусков ассемблера из файла                    :volhovm:
   Научился парсить конкретные куски кода, именно из .text секции, можно положить какие-нибудь темплейты в директорию, а потом их вытаскивать оттуда.
** CANCELED Проверка asm на consistency (а надо ли?)
   Пусть yasm сам проверяет.
** DONE Поддержка const int и их вызов из main                      :volhovm:
** DONE Поддержка базовых флагов                                    :volhovm:
** DONE Написать простой shell-тестер                               :volhovm:
** DONE Дамп ассемблера в файл                                      :volhovm:
   CLOSED: [2015-06-20 Sat 00:49]
** DONE Впилить простую поддержку бинарных операций             :flyingleafe:
   CLOSED: [2015-06-20 Sat 00:53]
** DONE Флажок для компиляции под Мак/винду                     :flyingleafe:
   CLOSED: [2015-06-20 Sat 03:06]
   На Маке/на винде имена функций должны быть запрепенджены _, стоит добавить флажок,
   который добавляет эти препенды
** DONE Добавить поддержку унарных операций на int (+-)             :volhovm:
** DONE Добавить в тестер поддержку .cpp файлов                     :volhovm:
** DONE Впилить let и локальные переменные                      :flyingleafe:
   CLOSED: [2015-06-20 Sat 19:56]
*** DONE Дататайп и парсер                                      :flyingleafe:
    CLOSED: [2015-06-20 Sat 03:05]
*** DONE Реализация                                             :flyingleafe:
    CLOSED: [2015-06-20 Sat 19:56]
    Здесь нужно подсчитывать размер стек-фрейма для всей функции на первом проходе.
    (посчитать количество всевозможных локальных переменных во всех let-ах)
    Потом мы просто выделяем это количество и всякий раз сопоставляем каждой переменной
    оффсет на стеке.
** DONE Переписать Asm-парсер на attoparsec                         :volhovm:
** DONE Расширить парсер асма с [CodeBlocks] до Assembler           :volhovm:
** DONE Добавить модуль загрузки библиотеки                         :volhovm:
** DONE Запилить операции на сравнение                 :volhovm::flyingleafe:
** DONE Добавить n-арные операции + тесты              :volhovm::flyingleafe:
** DONE Более консистентный парсер идентификаторов              :flyingleafe:
   CLOSED: [2015-06-23 Tue 13:54]
   Сейчас валидным идентификатором переменной является любая строка из букв
   и еще кучки символов. Надо сделать более строгий парсер для произвольных
   идентификаторов и отдельный - для встроенных (+, - и т. д.)
** DONE Парсинг комментариев                                    :flyingleafe:
   CLOSED: [2015-06-23 Tue 13:41]
** DONE Стандартные макросы (and, or и прочее) и препроцессинг  :flyingleafe:
   CLOSED: [2015-06-23 Tue 14:55]
** STARTED Реализовать стандартную библиотеку                       :volhovm:
*** DONE Придумать, как организовать стандартную библиотеку
    Хочется, чтобы какие-то стандартные функции типа print линковались к любому файлу (наподобие libc)
    Но как это сделать, если мы компилируем всего лишь в асм? Инклудить или что?
*** STARTED Впилить базовый ввод/вывод
** STARTED Проверка lisp-файла на consistency                   :flyingleafe:
   Проверка, что все функции, которые есть в файле, поддерживаются и т.д.
   Это теперь часть компилятора - функция, которая делает первый проход.
** TODO Выделять стекфрейм под каждую функцию скрипта           :flyingleafe:
** TODO Научиться влинковывать либу в Compiler
** TODO Добавить константные строчки в .data                    :flyingleafe:
** TODO Впилить динамическую память
