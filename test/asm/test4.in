;;; This is a library that implements big integer interface

extern malloc
extern free

;;; Required
global biFromInt
global biFromString
global biToString
global biDelete
global biSign
global biAdd
global biSub
global biMul
global biDivRem
global biCmp

;;; Custom
global biFromUInt
global biDump
global biSize
global biExpand
global biAddShort
global biMulShort
global biDivShort
global biCutTrailingZeroes
global biAddUnsigned
global biSubUnsigned
global biNegate
global biCmpUnsigned
global biCopy
global biIsZero

section .text
;;; void biCutTrailingZeroes(BigInt a)
;;; removes trailing zeroes (except the last one);
;;; reallocates .data section of bigint if more than trailing_removed_after
;;; trailing zeroes were removed
;;; never free's .data
biCutTrailingZeroes:
        mov     r8, rdi

        ;; ecx -- number of trailing zeroes removed
        xor     rcx, rcx
        xor     rax, rax

        ;; loop for removing trailing zeroes
        mov     r9, [r8+bigint.data]       ; data
        .loop
        mov     eax, dword[r8+bigint.size] ; current size
        cmp     eax, 1
        jle     .reallocate                ; proceed if size â‰¤ 1
        dec     eax                        ; indexing from 0
        cmp     qword[r9+8*rax], 0         ; return if last portion of data non-null
        jne     .reallocate
        dec     dword[r8+bigint.size]
        inc     ecx
        jmp     .loop

        ;; check if any trailing zeroes were removed
        .reallocate
        cmp     ecx, 0
        jle     .nullcheck

        ;; allocate array of new size
        push    r8
        push    r9
        mov     edi, dword[r8+bigint.size]
        shl     edi, 3
        sub     rsp, 8          ; align
        call    malloc
        add     rsp, 8
        pop     r9
        pop     r8
        mov     r10, rax

        ;; copy old data to new array
        xor     ecx, ecx
        .loop_copy
        mov     rdi, [r9+8*rcx]
        mov     [r10+8*rcx], rdi
        inc     ecx
        cmp     ecx, dword[r8+bigint.size]
        jl      .loop_copy

        ;; free current array, mov new array address into structure
        push    r8
        push    r10
        mov     rdi, [r8+bigint.data]
        sub     rsp, 8
        call    free
        add     rsp, 8
        pop     r10
        pop     r8
        mov     [r8+bigint.data], r10
        jmp     .nullcheck
        .free
        mov     dword[r8+bigint.sign], 0
        mov     rdi, r9
        push    r8
        call    free
        pop     r8

        ;; set sign 0 if zero
        .nullcheck
        cmp     dword[r8+bigint.size], 1
        jg      .return
        mov     r9, qword[r8+bigint.data]
        cmp     qword[r9], 0
        jne     .return
        mov     dword[r8+bigint.sign], 0

        .return
        ret

;;; BigInt biFromInt(int64_t x)
;;; Create a BigInt from 64-bit signed integer.
biFromInt:
        mov     r8, rdi

        ;; get space for bigint struc, put the pointer into r9
        push    r8
        mov     rdi, bigint_size
        call    malloc
        pop     r8
        mov     r9, rax

        ;; set proper sign
        mov     dword[r9+bigint.sign], 0
        bt      r8, 63
        jnc     .nonneg
        mov     dword[r9+bigint.sign], 0xffffffff
        neg     r8
        .nonneg

        ;; set size
        mov     dword[r9+bigint.size], 1

        ;; allocate memory for .data
        push    r8
        push    r9
        mov     rdi, 8
        sub     rsp, 8          ; align
        call    malloc
        add     rsp, 8
        pop     r9
        pop     r8

        ;; fill it and put to .data into struc
        mov     [rax], r8
        mov     [r9+bigint.data], rax

        ;; Remove trailing zeroes if present
        mov     rax, r9
        push    rax
        mov     rdi, r9
        call    biCutTrailingZeroes
        pop     rax

        ret

;;; BigInt biFromUInt(unsigned long int);
biFromUInt:
        mov     r8, rdi

        ;; get space for bigint struc, put the pointer into r9
        push    r8
        mov     rdi, bigint_size
        call    malloc
        pop     r8
        mov     r9, rax

        ;; set proper sign
        mov     dword[r9+bigint.sign], 0

        ;; set size
        mov     dword[r9+bigint.size], 1

        ;; allocate memory for array of size 1*8
        push    r8
        push    r9
        mov     rdi, 8
        sub     rsp, 8
        call    malloc
        add     rsp, 8
        pop     r9
        pop     r8

        ;; fill it and put as a member into struc
        mov     [rax], r8
        mov     [r9+bigint.data], rax

        ;; Remove trailing zeroes if present
        mov     rax, r9
        push    rax
        mov     rdi, r9
        call    biCutTrailingZeroes
        pop     rax

        ret


;;; void biDivRem(BigInt *quotient, BigInt *remainder, BigInt numerator, BigInt denominator);
;;; Compute quotient and remainder by divising numerator by denominator.
;;; quotient * denominator + remainder = numerator
;;; \param remainder must be in range [0, denominator) if denominator > 0
;;; and (denominator, 0] if denominator < 0.
biDivRem:
        ret

fail:
        mov     dword[0], 0

section .data
    fmtPrompt:  db 'Enter X and Y: ', 0
    fmtIn:      db '%lf%lf', 0
    fmtOut:     db 'X^Y is %f', 10, 0
    fmt2Pow:    db '2 in pow eq %lf', 10, 0
    format:     db 'exp = %lf mant = %lf\n', 0
;;;  mDAAAA!!!
    format2:    db 'int num = %d', 10, 0
    ;; MDAA
    shift:      dq 0.4999999999999
    here:       db 'here', 10, 0
    double:     db 'num = %lf', 10, 0


;; that's bss section
        section .bss
    dblX:       resq 1
    dblY:       resq 1
    intNum:     resd 1
